{"version":3,"sources":["../node_modules/@mui/material/TextField/textFieldClasses.js","../node_modules/@mui/material/TextField/TextField.js","pages/board/CreatePost.js"],"names":["getTextFieldUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","styled","FormControl","name","overridesResolver","props","styles","root","TextField","React","inProps","ref","useThemeProps","autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","idOverride","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","onBlur","onChange","onClick","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","InputMore","shrink","notched","native","undefined","useId","helperTextId","inputLabelId","InputComponent","InputElement","_jsx","_jsxs","clsx","InputLabel","htmlFor","Select","labelId","input","FormHelperText","CreatePost","enqueueSnackbar","useSnackbar","navigate","useNavigate","user","useSelector","state","goBackList","initialValues","title","content","author","authorId","authorName","submit","validationSchema","Yup","shape","max","onSubmit","values","a","setSubmitting","createPost","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","container","spacing","item","xs","md","Boolean","style","backgroundColor","customStyle","justifyContent","marginTop","disableElevation","size","padding","font","borderRadius","borderColor"],"mappings":"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","file":"static/js/18.98cc0a26.chunk.js","sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"maxRows\", \"minRows\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { refType, unstable_useId as useId } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport { getTextFieldUtilityClass } from './textFieldClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n      autoComplete,\n      autoFocus = false,\n      children,\n      className,\n      color = 'primary',\n      defaultValue,\n      disabled = false,\n      error = false,\n      FormHelperTextProps,\n      fullWidth = false,\n      helperText,\n      id: idOverride,\n      InputLabelProps,\n      inputProps,\n      InputProps,\n      inputRef,\n      label,\n      maxRows,\n      minRows,\n      multiline = false,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      placeholder,\n      required = false,\n      rows,\n      select = false,\n      SelectProps,\n      type,\n      value,\n      variant = 'outlined'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const InputMore = {};\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n    InputMore.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n    InputMore['aria-describedby'] = undefined;\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const InputElement = /*#__PURE__*/_jsx(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    onClick: onClick,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/_jsxs(TextFieldRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant,\n    ownerState: ownerState\n  }, other, {\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabel, _extends({\n      htmlFor: id,\n      id: inputLabelId\n    }, InputLabelProps, {\n      children: label\n    })), select ? /*#__PURE__*/_jsx(Select, _extends({\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement\n    }, SelectProps, {\n      children: children\n    })) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperText, _extends({\n      id: helperTextId\n    }, FormHelperTextProps, {\n      children: helperText\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;","import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport {Button, FormHelperText, Grid, Stack, TextareaAutosize, TextField} from '@mui/material';\r\nimport {Formik} from 'formik';\r\nimport {createPost} from 'api/board';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {useSnackbar} from 'notistack';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst CreatePost = () => {\r\n\t// [api 연결] useSnackbar에서 enqueueSnackbar 가져오기\r\n\tconst {enqueueSnackbar} = useSnackbar();\r\n\r\n\t// [이벤트 매핑] Todo: useNavigate에서 navigate 가져오기\r\n\tconst navigate = useNavigate();\r\n\r\n\t// [이벤트 매핑] store에서 user State 가져오기\r\n\tconst user = useSelector((state) => state.user);\r\n\tconst {id, name} = user;\r\n\r\n\tconst goBackList = () => {\r\n\t\t// [이벤트 매핑] Todo: 게시판 페이지로 이동(/board)\r\n\t\tnavigate('/board');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tcontent: '',\r\n\t\t\t\t\tauthor: {\r\n\t\t\t\t\t\t// [이벤트 매핑] user 정보 입력\r\n\t\t\t\t\t\tauthorId: id,\r\n\t\t\t\t\t\tauthorName: name,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubmit: null,\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={Yup.object().shape({\r\n\t\t\t\t\t// [이벤트 매핑] title validation : string 타입, 최대 255자, 필수(작성 안하면 '제목은 필수입니다.')\r\n\t\t\t\t\ttitle: Yup.string().max(255).required('제목은 필수입니다.'),\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit={async (values, {setSubmitting}) => {\r\n\t\t\t\t\t// [api 연결] 중복 방지를 위해 isSubmitting 상태 변경\r\n\t\t\t\t\tsetSubmitting(true);\r\n\t\t\t\t\t// [api 연결] Todo: 게시글 작성 api 호출\r\n\t\t\t\t\tawait createPost(values);\r\n\r\n\t\t\t\t\tsetSubmitting(false);\r\n\r\n\t\t\t\t\t// [api 연결]  snackbar를 이용해 api 호출 결과 피드백\r\n\t\t\t\t\tenqueueSnackbar('게시글을 등록하였습니다.', {\r\n\t\t\t\t\t\tvariant: 'success',\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// [이벤트 매핑] Todo: 게시판 페이지로 이동\r\n\t\t\t\t\tgoBackList();\r\n\t\t\t\t}}>\r\n\t\t\t\t{({errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values}) => (\r\n\t\t\t\t\t<form noValidate onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t\t<Grid item xs={24} md={12}>\r\n\t\t\t\t\t\t\t\t<Stack spacing={1}>\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\t\t\terror={Boolean(touched.title && errors.title)}\r\n\t\t\t\t\t\t\t\t\t\tid='title'\r\n\t\t\t\t\t\t\t\t\t\tvalue={values.title}\r\n\t\t\t\t\t\t\t\t\t\tname='title'\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t\t\tplaceholder='제목을 입력하세요'\r\n\t\t\t\t\t\t\t\t\t\tstyle={{backgroundColor: 'white'}}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{touched.title && errors.title && (\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText error id='helper-text-title-signup'>\r\n\t\t\t\t\t\t\t\t\t\t\t{errors.title}\r\n\t\t\t\t\t\t\t\t\t\t</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Stack spacing={1}>\r\n\t\t\t\t\t\t\t\t\t<TextareaAutosize\r\n\t\t\t\t\t\t\t\t\t\tid='content'\r\n\t\t\t\t\t\t\t\t\t\tname='content'\r\n\t\t\t\t\t\t\t\t\t\tminRows={5}\r\n\t\t\t\t\t\t\t\t\t\taria-label='maximum height'\r\n\t\t\t\t\t\t\t\t\t\tplaceholder='내용을 입력하세요'\r\n\t\t\t\t\t\t\t\t\t\tvalue={values.content}\r\n\t\t\t\t\t\t\t\t\t\tstyle={customStyle}\r\n\t\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t{errors.submit && (\r\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText error>{errors.submit}</FormHelperText>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<Grid container justifyContent='flex-end' style={{marginTop: 10}} spacing={2}>\r\n\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tdisableElevation\r\n\t\t\t\t\t\t\t\t\t\tdisabled={isSubmitting}\r\n\t\t\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\t\t\t// [api 연결] submit 버튼으로 지정\r\n\t\t\t\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\t\tcolor='primary'>\r\n\t\t\t\t\t\t\t\t\t\t등록\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tdisableElevation\r\n\t\t\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\t\t// [이벤트 매핑] 클릭시 게시판 페이지로 돌아가는 함수 매핑\r\n\t\t\t\t\t\t\t\t\t\tonClick={goBackList}\r\n\t\t\t\t\t\t\t\t\t\tcolor='error'>\r\n\t\t\t\t\t\t\t\t\t\t취소\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default CreatePost;\r\n\r\nconst customStyle = {\r\n\tpadding: '10.5px 14px 10.5px 12px',\r\n\tfont: 'inherit',\r\n\tborderRadius: '4px',\r\n\tborderColor: '#d9d9d9',\r\n};\r\n"],"sourceRoot":""}