{"version":3,"sources":["components/@extended/DataTable.js","pages/board/Board.js"],"names":["DataTable","columns","rows","rowsPerPageOptions","isLoading","rowClick","useState","page","setPage","rowsPerPage","setRowsPerPage","sx","maxHeight","stickyHeader","map","column","align","style","width","label","id","colSpan","py","minHeight","slice","row","hover","tabIndex","onClick","e","cursor","value","render","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","Board","navigate","useNavigate","data","setData","setLoading","useEffect","findPostList","a","getPostList","response","container","direction","justifyContent","spacing","item","variant","postId"],"mappings":"wQA+EeA,IA1EG,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,QAASC,EAAoE,EAApEA,KAAoE,IAA9DC,0BAA8D,MAAzC,CAAC,GAAI,GAAI,KAAgC,EAA1BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAClF,EAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAWA,OACC,qCACC,cAAC,IAAD,CAAgBC,GAAI,CAAEC,UAAW,KAAjC,SACC,eAAC,IAAD,CAAOC,cAAY,EAAC,aAAW,eAA/B,UACC,cAAC,IAAD,UACC,cAAC,IAAD,UACEZ,EAAQa,KAAI,SAACC,GAAD,OACZ,cAAC,IAAD,CAA2BC,MAAOD,EAAOC,MAAQD,EAAOC,MAAQ,SAAUC,MAAO,CAAEC,MAAOH,EAAOG,OAAjG,SACEH,EAAOI,OADOJ,EAAOK,WAM1B,cAAC,IAAD,UACGhB,EAuBD,cAAC,IAAD,UACC,cAAC,IAAD,CAAWY,MAAM,SAASK,QAAS,EAAnC,SACC,cAAC,IAAD,CAAKV,GAAI,CAAEW,GAAI,EAAGC,UAAW,KAA7B,SACC,cAAC,IAAD,UAzBHrB,GACAA,EAAKsB,MAAMjB,EAAOE,EAAaF,EAAOE,EAAcA,GAAaK,KAAI,SAACW,GACrE,OACC,cAAC,IAAD,CACCC,OAAK,EACLC,UAAW,EAEXC,QAASvB,EAAW,SAACwB,GAAD,OAAOxB,EAASwB,EAAGJ,IAAO,aAC9CR,MAAO,CAAEa,OAAQ,WALlB,SAOE7B,EAAQa,KAAI,SAACC,GACb,IAAMgB,EAAQN,EAAIV,EAAOK,IACzB,OACC,cAAC,IAAD,CAA2BJ,MAAOD,EAAOC,MAAQD,EAAOC,MAAQ,SAAhE,SACED,EAAOiB,OAASjB,EAAOiB,OAAOP,GAAOM,GADvBhB,EAAOK,QAPpBK,EAAIL,cA2BhB,cAAC,IAAD,CACCjB,mBAAoBA,EACpB8B,UAAU,MACVC,MAAOhC,EAAOA,EAAKiC,OAAS,EAC5B1B,YAAaA,EACbF,KAAMA,EACN6B,aA1DsB,SAACC,EAAOC,GAChC9B,EAAQ8B,IA0DNC,oBAhE6B,SAACF,GAChC3B,GAAgB2B,EAAMG,OAAOT,OAC7BvB,EAAQ,W,sIC+CKiC,UApDD,WAEb,IAAMC,EAAWC,cAGjB,EAAwBrC,mBAAS,IAAjC,mBAAOsC,EAAP,KAAaC,EAAb,KACA,EAAgCvC,oBAAS,GAAzC,mBAAOF,EAAP,KAAkB0C,EAAlB,KAGAC,qBAAU,WAETC,MACE,IAEH,IAAMA,EAAY,uCAAG,4BAAAC,EAAA,6DAEpBH,GAAW,GAFS,SAKGI,cALH,OAKdC,EALc,OAQpBN,EAAQM,GAERL,GAAW,GAVS,2CAAH,qDAyBlB,OACC,qCACC,cAAC,IAAD,CAAMM,WAAS,EAACC,UAAU,MAAMC,eAAe,WAAWC,QAAS,EAAnE,SACC,cAAC,IAAD,CAAMC,MAAI,EAAV,SACC,cAAC,IAAD,CAAQC,QAAQ,YAAY7B,QAhBL,WAE1Bc,EAAS,gBAcN,oCAKF,cAAC,IAAD,CAAWzC,QAASA,EAASC,KAAM0C,EAAMzC,mBAAoB,CAAC,GAAI,GAAI,IAAKC,UAAWA,EAAWC,SAhBlF,SAACwB,EAAGJ,GAEpB,IAAMiC,EAASjC,EAAIL,GAEnBsB,EAAS,SAAD,OAAUgB,WAmBpB,IAAMzD,EAAU,CACf,CACCmB,GAAI,QACJD,MAAO,eACPD,MAAO,IACPF,MAAO,QAER,CACCI,GAAI,SACJD,MAAO,qBACPD,MAAO,GACPF,MAAO","file":"static/js/13.ae1349fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TableHead, TableBody, TableCell, TableContainer, TablePagination, TableRow, Table, Box, CircularProgress } from '@mui/material';\r\n\r\nconst DataTable = ({ columns, rows, rowsPerPageOptions = [10, 25, 100], isLoading, rowClick }) => {\r\n\tconst [page, setPage] = useState(0);\r\n\tconst [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n\tconst handleChangeRowsPerPage = (event) => {\r\n\t\tsetRowsPerPage(+event.target.value);\r\n\t\tsetPage(0);\r\n\t};\r\n\r\n\tconst handleChangePage = (event, newPage) => {\r\n\t\tsetPage(newPage);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<TableContainer sx={{ maxHeight: 440 }}>\r\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t{columns.map((column) => (\r\n\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'} style={{ width: column.width }}>\r\n\t\t\t\t\t\t\t\t\t{column.label}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{!isLoading ? (\r\n\t\t\t\t\t\t\trows &&\r\n\t\t\t\t\t\t\trows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\tkey={row.id}\r\n\t\t\t\t\t\t\t\t\t\tonClick={rowClick ? (e) => rowClick(e, row) : () => {}}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.render ? column.render(row) : value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"center\" colSpan={6}>\r\n\t\t\t\t\t\t\t\t\t<Box sx={{ py: 3, minHeight: 560 }}>\r\n\t\t\t\t\t\t\t\t\t\t<CircularProgress />\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t\t<TablePagination\r\n\t\t\t\trowsPerPageOptions={rowsPerPageOptions}\r\n\t\t\t\tcomponent=\"div\"\r\n\t\t\t\tcount={rows ? rows.length : 0}\r\n\t\t\t\trowsPerPage={rowsPerPage}\r\n\t\t\t\tpage={page}\r\n\t\t\t\tonPageChange={handleChangePage}\r\n\t\t\t\tonRowsPerPageChange={handleChangeRowsPerPage}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default DataTable;\r\n\r\nDataTable.propTypes = {\r\n\tcolumns: PropTypes.array,\r\n\trows: PropTypes.array,\r\n\trowsPerPageOptions: PropTypes.array,\r\n\tisLoading: PropTypes.bool,\r\n\trowClick: PropTypes.func\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Button, Grid} from '@mui/material';\r\nimport DataTable from 'components/@extended/DataTable';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {getPostList} from 'api/board';\r\n\r\nconst Board = () => {\r\n\t// [이벤트 매핑] useNavigate에서 navigate 가져오기\r\n\tconst navigate = useNavigate();\r\n\r\n\t//[api 연결] data(기본값 : []), isLoading(기본값 : false)을 컴포넌트 State로 선언(useState)\r\n\tconst [data, setData] = useState([]);\r\n\tconst [isLoading, setLoading] = useState(false);\r\n\r\n\t//\r\n\tuseEffect(() => {\r\n\t\t// [api 연결] 로딩 시 게시글 리스트 api 호출 함수 실행\r\n\t\tfindPostList();\r\n\t}, []);\r\n\r\n\tconst findPostList = async () => {\r\n\t\t// [api 연결] isLoading의 상태값 변경(로딩중이면 true, 아니면 false)\r\n\t\tsetLoading(true);\r\n\r\n\t\t// [api 연결] Todo: api/board.js에서 게시글 리스트 api 호출 후 결과 받기\r\n\t\tconst response = await getPostList();\r\n\r\n\t\t// [api 연결] Todo: data에 결과 매핑하기\r\n\t\tsetData(response);\r\n\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst moveCreatePostPage = () => {\r\n\t\t// [이벤트 매핑] Todo: 글쓰기 페이지로 이동(/post/write)\r\n\t\tnavigate('/post/write');\r\n\t};\r\n\r\n\tconst rowClick = (e, row) => {\r\n\t\t// [이벤트 매핑] Todo: row 에서 게시글 id 받아오기(row.id)\r\n\t\tconst postId = row.id;\r\n\t\t// [이벤트 매핑] Todo: 게시글 상세 페이지(/post/:id) 로 이동\r\n\t\tnavigate(`/post/${postId}`);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Grid container direction='row' justifyContent='flex-end' spacing={2}>\r\n\t\t\t\t<Grid item>\r\n\t\t\t\t\t<Button variant='contained' onClick={moveCreatePostPage}>\r\n\t\t\t\t\t\t글쓰기\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<DataTable columns={columns} rows={data} rowsPerPageOptions={[10, 20, 30]} isLoading={isLoading} rowClick={rowClick} />\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Board;\r\n\r\n// [이벤트 매핑] DataTable에 들어갈 columns 설정\r\nconst columns = [\r\n\t{\r\n\t\tid: 'title',\r\n\t\tlabel: '제목',\r\n\t\twidth: 290,\r\n\t\talign: 'left',\r\n\t},\r\n\t{\r\n\t\tid: 'author',\r\n\t\tlabel: '작성자',\r\n\t\twidth: 60,\r\n\t\talign: 'left',\r\n\t},\r\n];\r\n"],"sourceRoot":""}